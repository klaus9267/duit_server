name: CD - Deploy

on:
  pull_request:
    branches: [main]
    types: [closed]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create build configuration
        run: |
          # Docker 빌드용 설정 파일 생성
          cat > src/main/resources/application.properties << EOF
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_TIMEOUT=${{ secrets.REDIS_TIMEOUT }}
          DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}
          UPLOAD_DIR=${{ secrets.UPLOAD_DIR }}
          BASE_URL=${{ secrets.BASE_URL }}
          EOF

          cat > src/main/resources/firebase-key.json << EOF
          ${{ secrets.FIREBASE_KEY }}
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            echo "🚀 배포 시작..."
            cd /home/vagom/duit-server
  
            # Docker 레지스트리 로그인
            echo "🔑 Docker 레지스트리 로그인 중..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  
            # 최신 이미지 다운로드
            echo "📦 최신 이미지 다운로드 중..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
  
            # 배포 실행
            docker compose pull app
            docker compose up -d --no-deps app

      - name: Health check and verification
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            cd /home/vagom/duit-server
            
            # 헬스체크 (3분 대기)
            for i in {1..60}; do
              if curl -f -s http://localhost:8080/actuator/health >/dev/null 2>&1; then
                echo "✅ 애플리케이션이 정상적으로 구동되었습니다! (${i}번째 시도)"
                break
              fi
              
              if [ $i -eq 60 ]; then
                echo "❌ 헬스체크 실패 (60회 시도 후 타임아웃)"
                echo "📋 컨테이너 로그 확인:"
                APP_CONTAINER=$(docker composes  ps -q app)
                if [ -n "$APP_CONTAINER" ]; then
                  docker logs --tail 50 $APP_CONTAINER || true
                else
                  echo "앱 컨테이너를 찾을 수 없습니다"
                  docker composes ps
                fi
                exit 1
              else
                echo "⏳ 대기 중... (${i}/60)"
                sleep 3
              fi
            done
            
            cd ..
            
            # 배포 상태 확인
            echo ""
            echo "📊 최종 배포 상태:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep duit
            
            # 이전 이미지 정리
            echo ""
            echo "🧹 이전 이미지 정리 중..."
            docker image prune -f
            
            echo ""
            echo "🎉 배포가 성공적으로 완료되었습니다!"

      - name: Create deployment summary
        run: |
          echo "### 🚀 배포 완료!" >> $GITHUB_STEP_SUMMARY
          echo "**배포 시간:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
